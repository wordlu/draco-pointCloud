// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Field } from '../ld-data/field.js';
import { Header } from '../ld-data/header.js';


export class PointCloud {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PointCloud {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointCloud(bb:flatbuffers.ByteBuffer, obj?:PointCloud):PointCloud {
  return (obj || new PointCloud()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointCloud(bb:flatbuffers.ByteBuffer, obj?:PointCloud):PointCloud {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointCloud()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

header(obj?:Header):Header|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Header()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

fields(index: number, obj?:Field):Field|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Field()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shape():string|null
shape(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shape(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isBigendian():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

compressionInfo():string|null
compressionInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
compressionInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startPointCloud(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, headerOffset, 0);
}

static addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fieldsOffset, 0);
}

static createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, shapeOffset, 0);
}

static addIsBigendian(builder:flatbuffers.Builder, isBigendian:number) {
  builder.addFieldInt8(3, isBigendian, 0);
}

static addCompressionInfo(builder:flatbuffers.Builder, compressionInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, compressionInfoOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDataVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endPointCloud(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPointCloudBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPointCloudBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPointCloud(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset, fieldsOffset:flatbuffers.Offset, shapeOffset:flatbuffers.Offset, isBigendian:number, compressionInfoOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  PointCloud.startPointCloud(builder);
  PointCloud.addHeader(builder, headerOffset);
  PointCloud.addFields(builder, fieldsOffset);
  PointCloud.addShape(builder, shapeOffset);
  PointCloud.addIsBigendian(builder, isBigendian);
  PointCloud.addCompressionInfo(builder, compressionInfoOffset);
  PointCloud.addData(builder, dataOffset);
  return PointCloud.endPointCloud(builder);
}
}
